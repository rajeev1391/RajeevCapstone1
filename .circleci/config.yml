  
version: 2.1
orbs:
  docker: circleci/docker@1.5.0
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
  aws-cli: circleci/aws-cli@1.4.1
  
jobs:
            
  create-rajeev-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.large
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''

  testKucluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: deployment
          command: |
            # Check the cluster/nodes/pods status
            kubectl get services
            kubectl get nodes
            kubectl get pods
            
            # Deployment - rolling deployment 
            kubectl apply -f ./frontendapp.yml
      #      kubectl apply -f ./services.yml
            kubectl get deployment front-end-app
            kubectl rollout restart deployment/front-end-app
            
            # Check the cluster/nodes/pods status
            sleep 20
            kubectl get services
            kubectl get nodes
            kubectl get pods
            sleep 20
            
workflows:
  default:
    jobs:
     - docker/hadolint:
        dockerfiles: ./Dockerfile
     - docker/publish:
        requires: [docker/hadolint]
        image: rajeev1391/capston_c1
        tag: latest
     - create-rajeev-cluster:  
        requires: [docker/publish]
        cluster-name: capstone
     - testKucluster:
#        requires: [docker/publish]
        requires: [create-rajeev-cluster]
        cluster-name: capstone 
        
